---
- name: playbook for webserver tier
  hosts: webservers
  become: true
  vars_files:
    - group_vars/firewall.yml
    - group_vars/logrotate.yml
    - group_vars/nginx.yml
    - group_vars/proxy.yml
    - group_vars/webtier.yml
    - group_vars/zsh.yml
    - "host_vars/{{ inventory_hostname }}/repos.yml"
    - "host_vars/{{ inventory_hostname }}/users.yml"
    - "host_vars/{{ inventory_hostname }}/webtier.yml"
    - [ "keys/{{ inventory_hostname }}/rsa/github.yml", group_vars/default.yml ]
    - "keys/{{ inventory_hostname }}/vpn.yml"

  pre_tasks:
    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: "{{ inventory_hostname != 'test' }}"
        update_cache: yes
        cache_valid_time: 86400

  roles:
    - role: firewall
    - role: logrotate
    - role: users
    - role: oh-my-zsh
    - role: python
    - role: docker
    - role: certbot
    - role: webtier


- name: playbook for nginx
  hosts: webservers
  become: true
  vars_files:
    - group_vars/nginx.yml
    - group_vars/proxy.yml
    - group_vars/webtier.yml
    - [ "host_vars/{{ inventory_hostname }}/nginx.yml", group_vars/default.yml ]
    - "host_vars/{{ inventory_hostname }}/webtier.yml"

  pre_tasks:
    # certificate
    - name: check cert exists
      stat:
        path: "/etc/letsencrypt/live/{{ domain_name }}"
      register: cert_exists
      when: cert_domains is defined

    - name: obtain cert
      shell: >
        letsencrypt certonly 
        -n -d {{ cert_domains|join(' -d ') }}
        --standalone
        --agree-tos
        --rsa-key-size 4096
        --email {{ certbot_email }}
      when: cert_domains is defined and cert_exists.stat.exists == False

    # dhparam
    - name: check dhparam exists
      stat:
        path: /etc/ssl/dhparam.pem
      register: dhparam_exists

    - name: openssl dhparam
      command: openssl dhparam -out /etc/ssl/dhparam.pem 4096
      async: 3000
      poll: 0
      when: dhparam_exists.stat.exists == False 

  roles:
    - role: nginx
